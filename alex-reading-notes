CHESS (Heisenbugs):
	Tool for finding concurrency bugs in Win32 and .NET using instrumentation to test different interleavings.
	Found deadlock after 6737 interleavings in 20ish seconds.
	Runs unit tests.
	Records last interleaving to disk so it can be re-run in debugger to isolate bug.
	Builds happens-before graph.
	Only one thread is executed at a time in a non-pre-emptive fashion. 
	Threads are changed when synchronisation and yielding operations are performed.
	Thread changes are logged to provide a base for the next run.
	Scheduler assigns lower priorities to threads that explicitly yield.
	Most bugs only require a few pre-emptions to find; does not pre-empt library functions.

DataCollider (Race Detection):
	Samples memory accesses for race detection via breakpoints.
	A few breakpoints are placed randomly on memory access instructions. Breakpoints are then placed on the data addresses.
	Catches both threads during a data race; information, such as stack traces, are obtained.
	Must filter data races after catching to determine if they are benign (such as logging).
	Performs static analysis to find instructions to place breakpoints; stack and synchronisation operations are discarded.
	Once the instruction breakpoint is reached, the thread is paused and a breakpoint is set on the data. If the data
		breakpoint is reached before unpausing the thread, a data race is present. If the breakpoint is not reached
		within a period of time, the breakpoints are cleared.
	Delays are implemented with busy loops and yielding.

IMUnit (Unit Testing):
	Creates a schedule language based on scheduling events. 
	Requires integrating schedule language into testing code.
	Tool enforces the ordering given by the schedule language.

Eraser (Race Detection):
	Locking discipline-policy that ensures absence of data races.
	Utilizes binary re-writing. 
	Lockset algorithm: build a set of locks for each shared variable. Each time the variable is accessed, refine the set
		by removing any locks that are not held by the current thread. Inadequate for initialization, read-only, and
		multiple reader scenarios.
	Eraser improves Lockset by delaying refinement until after a second thread accesses the variable, not reporting
		empty lock sets until a post-initialization write has been performed, and using separate sets for write locks.
	Each load, store, and lock operation are statically instrumented along with thread operations.
	False alarms occurred with memory reuse, privately implemented locks, and benign races.
	
Concurrent Breakpoints:
	Tool used to force the occurrence of known bugs; it does not find bugs.
	Concurrent breakpoint-set of program states and a scheduling decision; formally, two locations and a predicate.
	Program reaches a concurrent breakpoint when two threads reach the two locations and the predicate regarding
		the state of the program is true.	
	To increase the probability of hitting concurrent breakpoints, a thread is delayed once it reaches one of the 
		locations if the predicate is true. If the corresponding thread has already been delayed, the breakpoint
		is reached.
	Requires integrating concurrent breakpoint code into testing code.
	
PCT (Randomized Scheduler):
	Schedules only one thread at a time; the unblocked thread with highest priority executes.
	Each thread is initialized to a different priority; priorities change when executing change points placed in the code.
	Priority changes cause different threads to execute; placement of priorities and change points determines exec order.

RaceTrack (Race Detection):
	Implemented in .NET virtual machine without modifying running applications; JIT inserts RaceTrack calls.
	Builds on the Lockset algorithm to reduce false positives by including fork and join in the analysis. 
	JIT produces additional instructions for synchronization primitives and load/store operations to track sets.
 
